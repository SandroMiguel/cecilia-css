/**
 * Cecilia CSS - a set of tools for quick development of web interfaces.
 *
 * @copyright 2015-2023 Sandro Miguel Marques
 * @package Cecilia CSS
 * @author Sandro Miguel Marques - http://sandromiguel.com
 * @license MIT Open Source
 * @version v0.5.0 (2023/01/11)
 * @link https://github.com/SandroMiguel/cecilia-css
 */

 @use '../node_modules/normalize.css/normalize.css';
 @use 'root';
 @use 'variables';
 @use 'sass:map';
 @use 'sass:math';

 
.test {
    background-color: #dad55e;
}

/* ========================================================================== *
   Reset 3.0.0 (2023/01/07)
 * ========================================================================== */

*,
*::before,
*::after {
    box-sizing: border-box;
}
 
/* ========================================================================== *
   Base style v2.4.0 (2023/01/04)
 * ========================================================================== */

 body {
    background-color: variables.$background-color;
    color: variables.$color-base;
    font-family: variables.$font-family-base;
    font-size: variables.$font-size-base;
    font-weight: variables.$font-weight-base;
    line-height: variables.$line-height-base;
}

pre,
code,
kbd,
samp {
  font-family: variables.$font-family-code;
}

/* Typography > Headings */
h1,
.h1,
h2,
.h2,
h3,
.h3,
h4,
.h4,
h5,
.h5,
h6,
.h6 {
  margin-bottom: variables.$headings-margin-bottom;
  font-weight: 500;
  line-height: variables.$headings-line-height;
}

h1, .h1 {
  font-size: variables.$font-size-h1;
}

h2, .h2 {
    font-size: variables.$font-size-h2;
}

h3, .h3 {
    font-size: variables.$font-size-h3;
}

h4, .h4 {
    font-size: variables.$font-size-h4;
}

h5, .h5 {
    font-size: variables.$font-size-h5;
}

h6, .h6 {
    font-size: variables.$font-size-h6;
}

/* Typography > Font size */
.textXs {
    font-size: 0.7rem;
}

.textSm {
    font-size: 0.85rem;
}
  
.textLg {
    font-size: 1.3rem;
}
  
.textXl {
    font-size: 1.5rem;
}
  
.text2Xl {
    font-size: 2rem;
}
  
.text3Xl {
    font-size: 3rem;
}
  
.text4Xl {
    font-size: 4rem;
}
  
.text5Xl {
    font-size: 5rem;
}
  
/* Horizontal rules */
hr {
    margin-top: 1rem;
    margin-bottom: 1rem;
    border: 0;
    border-top: 1px solid #e5e5e5;
}

/* Emphasis */
small, .small {
    font-size: 80%;
}

mark {
    padding: 0.2em;
    background-color: #f8fc94;
}

/* Lists */
ul {
    padding-left: 0;
    list-style: none;
}

blockquote {
    font-size: 1.9rem;
    quotes: "\201C""\201D""\2018""\2019";
}

blockquote::before {
    left: -6px;
    position: relative;
    color: #b8b7b7;
    content: open-quote;
    font-size: 4em;
    line-height: 0.1rem;
    margin-right: 0.9rem;
    vertical-align: -0.4em;
}

/* Code */
code {
    font-size: 87.5%;
    color: rgb(237 31 68 / 100%);
    word-break: break-all;
}

a > code {
    color: inherit;
}

kbd {
    padding: 0.2rem 0.4rem;
    font-size: 87.5%;
    color: rgb(255 255 255 / 100%);
    background-color: rgb(50 50 50 / 100%);
    border-radius: 0.2rem;
}

kbd kbd {
    padding: 0;
    font-size: 100%;
    font-weight: 700;
}

pre {
    display: block;
    font-size: 87.5%;
    color: rgb(50 50 50 / 100%);
}

pre code {
    font-size: inherit;
    color: inherit;
    word-break: normal;
}

/* Tables */
table {
    width: 100%;
    max-width: 100%;
    margin-bottom: 1rem;
    background-color: transparent;
}

table th,
table td {
    padding: 0.75rem;
    vertical-align: top;
    border-bottom: 1px solid rgb(0 0 0 / 10%);
}

table thead th {
    vertical-align: bottom;
    border-bottom: 1px solid rgb(0 0 0 / 10%);
}

table tbody + tbody {
    border-top: 1px solid rgb(0 0 0 / 10%);
}

table table {
    background-color: #fff;
}

/* Base > Forms */
input {
    display: block;
    width: 100%;
    padding: 0.375rem 0.75rem;
    color: #222;
    background-color: #fff;
    background-clip: padding-box;
    border: 1px solid #e5e5e5;
    border-radius: 0.25rem;
    transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
}

input::-ms-expand {
    background-color: transparent;
    border: 0;
}

input:focus {
    color: #495057;
    background-color: #fff;
    border-color: #bbb;
    outline: 0;
    box-shadow: 0 0 0 0.1rem rgb(0 0 0 / 10%);
}

input::placeholder {
    color: #aaa;
    opacity: 1;
}

input:disabled,
input[readonly] {
    background-color: #ddd;
    opacity: 1;
}

select:focus::-ms-value {
    color: #222;
    background-color: #fff;
}

input[type="file"],
input[type="range"] {
    display: block;
    width: 100%;
    padding: 0.375rem 0.75rem;
    color: #222;
    background-color: #fff;
    background-clip: padding-box;
    border: 1px solid #e5e5e5;
    border-radius: 0.25rem;
    transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
}

/* ========================================================================== *
   Layout | Grid > Container; Row; Columns v2.0.0 (2023/01/10)
 * ========================================================================== */

 .container {
    --gutter: 1.5rem;

    width: 100%;
    padding-right: calc(var(--gutter) * 0.5);
    padding-left: calc(var(--gutter) * 0.5);
    margin-right: auto;
    margin-left: auto;
}

@media (min-width: map.get(variables.$grid-breakpoints, 'sm')) {
    .container {
        max-width: map.get(variables.$container-max-widths, 'sm');
    }
}

@media (min-width: map.get(variables.$grid-breakpoints, 'md')) {
    .container {
        max-width: map.get(variables.$container-max-widths, 'md');
    }
}

@media (min-width: map.get(variables.$grid-breakpoints, 'lg')) {
    .container {
        max-width: map.get(variables.$container-max-widths, 'lg');
    }
}

@media (min-width: map.get(variables.$grid-breakpoints, 'xl')) {
    .container {
        max-width: map.get(variables.$container-max-widths, 'xl');
    }
}

@media (min-width: map.get(variables.$grid-breakpoints, 'xxl')) {
    .container {
        max-width: map.get(variables.$container-max-widths, 'xxl');
    }
}

.containerFull {
    width: 100%;
    padding-right: calc(var(--gutter) * 0.5);
    padding-left: calc(var(--gutter) * 0.5);
    margin-left: auto;
    margin-right: auto;
}

.row {
    display: flex;
    flex-wrap: wrap;
    margin-right: calc(-0.5 * var(--gutter));
    margin-left: calc(-0.5 * var(--gutter));
  }

.row > * {
    flex-shrink: 0;
    width: 100%;
    max-width: 100%;
    padding-right: calc(var(--gutter) * 0.5);
    padding-left: calc(var(--gutter) * 0.5);
  }

.col {
    flex: 1 0 0%;

}

.noGutters {
    margin-right: 0;
    margin-left: 0;

    > .col,
    > [class*="col-"] {
        padding-right: 0;
        padding-left: 0;
    }
}

.colAuto {
    flex: 0 0 auto;
    width: auto;
    max-width: none;
}

@for $i from 1 through 12 {
    .col-#{$i} {
        flex: 0 0 auto;
        width: math.percentage(calc($i/12));
    }
}

.orderFirst {
    order: -1;
}

.orderLast {
    order: 13;
}

@for $i from 0 through 12 {
    .order-#{$i} {
        order: #{$i};
    }
}

@media (min-width: map.get(variables.$grid-breakpoints, 'sm')) {
    .colSm {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
    }

    .colSmAuto {
        flex: 0 0 auto;
        width: auto;
        max-width: none;
    }

    @for $i from 1 through 12 {
        .colSm#{$i} {
            flex: 0 0 auto;
            width: math.percentage(calc($i/12));
        }
    }

    .orderSmFirst {
        order: -1;
    }

    .orderSmLast {
        order: 13;
    }

    @for $i from 0 through 12 {
        .orderSm#{$i} {
            order: #{$i};
        }
    }
}

@media (min-width: map.get(variables.$grid-breakpoints, 'md')) {
    .colMd {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
    }

    .colMdAuto {
        flex: 0 0 auto;
        width: auto;
        max-width: none;
    }

    @for $i from 1 through 12 {
        .colMd#{$i} {
            flex: 0 0 auto;
            width: math.percentage(calc($i/12));
        }
    }

    .orderMdFirst {
        order: -1;
    }

    .orderMdLast {
        order: 13;
    }

    @for $i from 0 through 12 {
        .orderMd#{$i} {
            order: #{$i};
        }
    }
}

@media (min-width: map.get(variables.$grid-breakpoints, 'lg')) {
    .colLg {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
    }

    .colLgAuto {
        flex: 0 0 auto;
        width: auto;
        max-width: none;
    }

    @for $i from 1 through 12 {
        .colLg#{$i} {
            flex: 0 0 auto;
            width: math.percentage(calc($i/12));
        }
    }

    @for $i from 0 through 12 {
        .order-lg-#{$i} {
            order: #{$i};
        }
    }
}

@media (min-width: map.get(variables.$grid-breakpoints, 'xl')) {
    .colXl {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
    }

    .colXlAuto {
        flex: 0 0 auto;
        width: auto;
        max-width: none;
    }

    @for $i from 1 through 12 {
        .colXl#{$i} {
            flex: 0 0 auto;
            width: math.percentage(calc($i/12));
        }
    }

    .orderXlFirst {
        order: -1;
    }

    .orderXlLast {
        order: 13;
    }

    @for $i from 0 through 12 {
        .orderXl#{$i} {
            order: #{$i};
        }
    }
}

@media (min-width: map.get(variables.$grid-breakpoints, 'xxl')) {
    .colXxl {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
    }

    .colXxlAuto {
        flex: 0 0 auto;
        width: auto;
        max-width: none;
    }

    @for $i from 1 through 12 {
        .colXxl#{$i} {
            flex: 0 0 auto;
            width: math.percentage(calc($i/12));
        }
    }

    .orderXxlFirst {
        order: -1;
    }

    .orderXxlLast {
        order: 13;
    }

    @for $i from 0 through 12 {
        .orderXxl#{$i} {
            order: #{$i};
        }
    }
}

/* Tables */
.table {
    width: 100%;
    max-width: 100%;
    background-color: transparent;
}

.table th,
.table td {
    padding: 0.75rem;
    vertical-align: top;
    border-bottom: 1px solid rgb(0 0 0 / 10%);
}

.table thead th {
    vertical-align: bottom;
    border-bottom: 1px solid rgb(0 0 0 / 10%);
}

.table tbody + tbody {
    border-top: 1px solid rgb(0 0 0 / 10%);
}

.table .table {
    background-color: #fff;
}

/* Base > Forms */
.formGroup {
    margin-bottom: 1rem;
}

.formControl {
    display: block;
    width: 100%;
    padding: 0.375rem 0.75rem;
    line-height: 1.5;
    color: #222;
    background-color: #fff;
    background-clip: padding-box;
    border: 1px solid #e5e5e5;
    border-radius: 0.25rem;
    transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
}

.formControl:focus {
    color: #495057;
    background-color: #fff;
    border-color: #bbb;
    outline: 0;
    box-shadow: 0 0 0 0.1rem rgb(0 0 0 / 10%);
}

.formControl::placeholder {
    color: #aaa;
    opacity: 1;
}

.formControl:disabled,
.formControl[readonly] {
    background-color: #ddd;
    opacity: 1;
}

select.formControl:focus::-ms-value {
    color: #222;
    background-color: #fff;
}

.formControlFile,
.formControlRange {
    display: block;
    width: 100%;
    padding: 0.375rem 0.75rem;
    line-height: 1.5;
    color: #222;
    background-color: #fff;
    background-clip: padding-box;
    border: 1px solid #e5e5e5;
    border-radius: 0.25rem;
    transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
}
